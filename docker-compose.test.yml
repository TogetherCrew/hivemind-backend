version: "3.9"

services:
  app:
    build:
      context: .
      target: test
      dockerfile: Dockerfile
    environment:
      - PORT=3000
      - RABBIT_HOST=rabbitmq
      - RABBIT_PORT=5672
      - RABBIT_USER=root
      - RABBIT_PASSWORD=pass
      - NEO4J_DB=neo4j
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=root
      - POSTGRES_PASS=pass
      - POSTGRES_PORT=5432
      - SENTRY_DSN=sample_dsn
      - SENTRY_ENV=local
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - CHUNK_SIZE=512
      - EMBEDDING_DIM=1024
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_API_KEY=
    networks:
      - python_service_network
    volumes:
      - ./coverage:/project/coverage
    depends_on:
      postgres:
        condition: service_healthy
      qdrant-healthcheck:
        condition: service_healthy
  postgres:
    image: "ankane/pgvector"
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=pass
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - python_service_network
  qdrant:
    image: qdrant/qdrant:v1.9.2
    restart: always
    container_name: qdrant
    ports:
      - 6333:6333
      - 6334:6334
    expose:
      - 6333
      - 6334
      - 6335
    volumes:
      - ./qdrant_data:/qdrant_data
  qdrant-healthcheck:
    restart: always
    image: curlimages/curl:latest
    entrypoint: ["/bin/sh", "-c", "--", "while true; do sleep 30; done;"]
    depends_on:
      - qdrant
    healthcheck:
      test: ["CMD", "curl", "-f", "http://qdrant:6333/readyz"]
      interval: 10s
      timeout: 2s
      retries: 5


networks:
  python_service_network:
    driver: bridge